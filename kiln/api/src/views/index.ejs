<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Piston Package Manager and IDE</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        h1 {
            color: #333;
        }
        #packages {
            margin-top: 20px;
        }
        .package-list {
            margin-bottom: 20px;
        }
        .package-item {
            padding: 5px 0;
        }
        .package-item:nth-child(odd) {
            background-color: #f9f9f9;
        }
        form {
            margin-bottom: 20px;
        }
        input, select, button {
            padding: 8px;
            margin-right: 10px;
        }
        button {
            cursor: pointer;
        }
        #message {
            color: green;
            margin-top: 10px;
        }
        #error {
            color: red;
            margin-top: 10px;
        }
        #editor {
            width: 100%;
            height: 400px;
            border: 1px solid #ccc;
            margin-bottom: 10px;
        }
        #output {
            white-space: pre-wrap;
            background-color: #f9f9f9;
            padding: 10px;
            border: 1px solid #ccc;
            min-height: 100px;
        }
        .output-stage {
            margin-bottom: 15px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .stage-header {
            font-weight: bold;
            margin-bottom: 5px;
            color: #333;
        }
        .stage-content {
            margin-left: 10px;
        }
        .stage-stdout {
            color: #000;
        }
        .stage-stderr {
            color: #d32f2f;
        }
    </style>
    <!-- Include Monaco Editor via CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.52.0/min/vs/loader.min.js"></script>
</head>
<body>

<h1>Piston Package Manager</h1>

<h2>Install New Package</h2>
<form id="install-form">
    <input type="text" id="language" placeholder="Language (e.g., python)" required>
    <input type="text" id="version" placeholder="Version (e.g., 3.9 or *)" required>
    <button type="submit">Install Package</button>
</form>
<div id="message"></div>
<div id="error"></div>

<h2>Available Packages</h2>
<div id="available-packages" class="package-list">
    <button onclick="fetchAvailablePackages()">Refresh available Packages</button>
    <div id="available-packages-list"></div>
</div>

<h2>Installed Packages</h2>
<div id="installed-packages" class="package-list">
    <button onclick="fetchInstalledPackages()">Refresh installed Packages</button>
    <div id="installed-packages-list"></div>
</div>

<!-- IDE Section -->
<h2>Online Code Editor</h2>
<div>
    <select id="ide-language" onchange="changeLanguage()">
        <!-- Languages will be populated dynamically -->
    </select>
    <select id="ide-version">
        <!-- Versions will be populated dynamically -->
    </select>
    <button onclick="runCode()">Run Code</button>
</div>
<div id="editor"></div>
<div>
    <h3>Output:</h3>
    <div id="output"></div>
</div>
<div id="ide-error" style="color: red;"></div>


<script>
    // Function to fetch available packages
    async function fetchAvailablePackages() {
        const url = '/api/v2/packages';
        try {
            const response = await fetch(url);
            if (!response.ok) throw new Error('Failed to fetch available packages');
            const data = await response.json();
            displayPackages(data, 'available-packages-list');
        } catch (error) {
            document.getElementById('error').innerText = error.message;
        }
    }

    // Function to fetch installed packages
    async function fetchInstalledPackages() {
        const url = '/api/v2/runtimes';
        try {
            const response = await fetch(url);
            if (!response.ok) throw new Error('Failed to fetch installed packages');
            const data = await response.json();
            displayPackages(data, 'installed-packages-list', true);
        } catch (error) {
            document.getElementById('error').innerText = error.message;
        }
    }

    // Function to display packages in the DOM
    function displayPackages(packages, elementId, isAvailable = false) {
        const container = document.getElementById(elementId);
        container.innerHTML = '';
        packages.forEach(pkg => {
            const div = document.createElement('div');
            div.className = 'package-item';
            if (!isAvailable) {
                div.innerText = `${pkg.language} (${pkg.language_version})`;
            } else {
                // For installed packages, add a Delete button
                div.innerHTML = `
                    ${pkg.language} (${pkg.version})
                    <button onclick="deletePackage('${pkg.language}', '${pkg.version}')">Delete</button>
                `;
            }
            container.appendChild(div);
        });
    }

    // Function to delete an installed package
    async function deletePackage(language, version) {
        const url = '/api/v2/packages';
        const data = {
            language: language,
            version: version
        };
        try {
            const response = await fetch(url, {
                method: 'DELETE',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(data)
            });
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Failed to delete package');
            }
            const result = await response.json();
            document.getElementById('message').innerText = `Package ${result.language} (${result.version}) deleted successfully.`;
            document.getElementById('error').innerText = '';
            fetchInstalledPackages(); // Refresh the installed packages list
        } catch (error) {
            document.getElementById('error').innerText = error.message;
            document.getElementById('message').innerText = '';
        }
    }


    // Variables to store runtimes
    var runtimes = [];
    var languageVersions = {};
    
    // Variables to store runtimes and current language
    var editor;
    var currentLanguage = '';

    // Function to fetch available runtimes and initialize the editor
    async function fetchRuntimes() {
        const url = '/api/v2/runtimes';
        try {
            const response = await fetch(url);
            if (!response.ok) throw new Error('Failed to fetch runtimes');
            const data = await response.json();
            runtimes = data;
            populateLanguages();
            initializeEditor();
        } catch (error) {
            document.getElementById('ide-error').innerText = error.message;
        }
    }

    // Function to populate language select box
    function populateLanguages() {
        const languageSelect = document.getElementById('ide-language');
        const languages = [...new Set(runtimes.map(rt => rt.language))];
        languages.sort();
        languages.forEach(lang => {
            const option = document.createElement('option');
            option.value = lang;
            option.text = lang;
            languageSelect.appendChild(option);
        });
        // Set the current language to the first in the list
        currentLanguage = languageSelect.value;
        changeLanguage(); // Populate versions for the selected language
    }

    // Function to initialize the Monaco editor
    function initializeEditor() {
        require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.33.0/min/vs' }});
        require(['vs/editor/editor.main'], function() {
            const initialContent = localStorage.getItem('editorContent_' + currentLanguage) || '';
            editor = monaco.editor.create(document.getElementById('editor'), {
                value: initialContent,
                language: getMonacoLanguage(currentLanguage),
                theme: 'vs-light',
            });
            // Save content to localStorage on every change
            editor.onDidChangeModelContent(function() {
                const content = editor.getValue();
                localStorage.setItem('editorContent_' + currentLanguage, content);
            });
        });
    }

    // Function to change language and update editor
    function changeLanguage() {
        // Save current content
        if (editor) {
            const content = editor.getValue();
            localStorage.setItem('editorContent_' + currentLanguage, content);
        }

        const language = document.getElementById('ide-language').value;
        const versionSelect = document.getElementById('ide-version');
        versionSelect.innerHTML = '';
        const versions = runtimes.filter(rt => rt.language === language).map(rt => rt.version);
        versions.sort((a, b) => (a > b ? -1 : 1)); // Sort versions descending
        versions.forEach(ver => {
            const option = document.createElement('option');
            option.value = ver;
            option.text = ver;
            versionSelect.appendChild(option);
        });

        // Update current language
        currentLanguage = language;

        // Load content for the new language
        const newContent = localStorage.getItem('editorContent_' + currentLanguage) || '';

        // Change editor language and content
        if (editor) {
            monaco.editor.setModelLanguage(editor.getModel(), getMonacoLanguage(currentLanguage));
            editor.setValue(newContent);
        }
    }

    // Map Piston languages to Monaco languages
    function getMonacoLanguage(pistonLanguage) {
        const languageMap = {
            'assembly': 'asm',
            'bash': 'shell',
            'c': 'c',
            'cpp': 'cpp',
            'csharp': 'csharp',
            'clojure': 'clojure',
            'coffeescript': 'coffeescript',
            'crystal': 'ruby',
            'd': 'd',
            'elixir': 'elixir',
            'go': 'go',
            'haskell': 'haskell',
            'java': 'java',
            'javascript': 'javascript',
            'julia': 'julia',
            'kotlin': 'kotlin',
            'lua': 'lua',
            'markdown': 'markdown',
            'nim': 'nim',
            'objective-c': 'objective-c',
            'ocaml': 'ocaml',
            'perl': 'perl',
            'php': 'php',
            'python': 'python',
            'r': 'r',
            'ruby': 'ruby',
            'rust': 'rust',
            'scala': 'scala',
            'swift': 'swift',
            'typescript': 'typescript',
            // Add more mappings as needed
        };
        return languageMap[pistonLanguage.toLowerCase()] || 'plaintext';
    }

    // Function to extract dependencies from code
    function getDependencies(code, language) {
        let dependencies = [];
        if (language.startsWith('python')) {
            // Regular expressions to match 'import module' and 'from module import ...'
            const importRegex = /^\s*import\s+([a-zA-Z_][\w]*)/gm;
            const fromImportRegex = /^\s*from\s+([a-zA-Z_][\w]*)/gm;
            let match;
            while ((match = importRegex.exec(code)) !== null) {
                dependencies.push(match[1]);
            }
            while ((match = fromImportRegex.exec(code)) !== null) {
                dependencies.push(match[1]);
            }
            // Remove duplicates
            dependencies = [...new Set(dependencies)];
        } else if (language === 'javascript' || language === 'nodejs') {
            // For Node.js, match 'require("module")' or 'import ... from "module"'
            const requireRegex = /require\(['"]([^'"]+)['"]\)/gm;
            const importFromRegex = /import\s+.*\s+from\s+['"]([^'"]+)['"]/gm;
            const importRegex = /import\s+['"]([^'"]+)['"]/gm; // For 'import "module"'
            let match;
            while ((match = requireRegex.exec(code)) !== null) {
                dependencies.push(match[1]);
            }
            while ((match = importFromRegex.exec(code)) !== null) {
                dependencies.push(match[1]);
            }
            while ((match = importRegex.exec(code)) !== null) {
                dependencies.push(match[1]);
            }
            // Remove duplicates
            dependencies = [...new Set(dependencies)];
        }
        return dependencies;
    }

    // Function to run code
    async function runCode() {
        const language = document.getElementById('ide-language').value;
        const version = document.getElementById('ide-version').value;
        const code = editor.getValue();

        // Get dependencies
        const dependencies = getDependencies(code, language);

        const data = {
            language: language,
            version: version,
            files: [
                {
                    name: 'main',
                    content: code,
                }
            ],
            stdin: '',
            args: [],
            compile_timeout: 10000,
            run_timeout: 3000,
            compile_memory_limit: 100000000, // 100MB
            run_memory_limit: 100000000      // 100MB
        };

        // Include dependencies if any
        if (dependencies.length > 0) {
            data.dependencies = dependencies;
        }

        try {
            const response = await fetch('/api/v2/execute', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(data)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Failed to execute code');
            }

            const result = await response.json();
            displayOutput(result);
        } catch (error) {
            document.getElementById('ide-error').innerText = error.message;
            document.getElementById('output').innerText = '';
        }
    }

    // Function to display output
    function displayOutput(result) {
        document.getElementById('ide-error').innerText = '';
        const outputDiv = document.getElementById('output');
        outputDiv.innerHTML = ''; // Clear previous output

        if (!result.stages) {
            outputDiv.innerText = 'No output available';
            return;
        }

        // Process each stage in order
        const stages = ['install', 'execute'];
        stages.forEach(stageName => {
            const stage = result.stages[stageName];
            if (stage) {
                const stageDiv = document.createElement('div');
                stageDiv.className = 'output-stage';

                // Create stage header
                const header = document.createElement('div');
                header.className = 'stage-header';
                header.textContent = `== ${stageName.charAt(0).toUpperCase() + stageName.slice(1)} Stage ==`;
                stageDiv.appendChild(header);

                // Create stage content
                const content = document.createElement('div');
                content.className = 'stage-content';

                // Add stdout if present
                if (stage.stdout) {
                    const stdout = document.createElement('div');
                    stdout.className = 'stage-stdout';
                    stdout.textContent = stage.stdout;
                    content.appendChild(stdout);
                }

                // Add stderr if present
                if (stage.stderr) {
                    const stderr = document.createElement('div');
                    stderr.className = 'stage-stderr';
                    stderr.textContent = stage.stderr;
                    content.appendChild(stderr);
                }

                stageDiv.appendChild(content);
                outputDiv.appendChild(stageDiv);
            }
        });

        // If there's a webAppUrl, display it
        if (result.webAppUrl) {
            const webAppDiv = document.createElement('div');
            webAppDiv.className = 'output-stage';
            webAppDiv.innerHTML = `<div class="stage-header">Web Application URL:</div>
                                 <div class="stage-content">
                                     <a href="${result.webAppUrl}" target="_blank">${result.webAppUrl}</a>
                                 </div>`;
            outputDiv.appendChild(webAppDiv);
        }
    }

    // Function to install a new package
    async function installPackage(language, version) {
        const url = '/api/v2/packages';
        const data = {
            language: language,
            version: version
        };
        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify(data)
            });
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Failed to install package');
            }
            const result = await response.json();
            document.getElementById('message').innerText = `Package ${result.language} (${result.version}) installed successfully.`;
            document.getElementById('error').innerText = '';
            fetchInstalledPackages();
        } catch (error) {
            document.getElementById('error').innerText = error.message;
            document.getElementById('message').innerText = '';
        }
    }

    // Event listener for the install form
    document.getElementById('install-form').addEventListener('submit', function(event) {
        event.preventDefault();
        const language = document.getElementById('language').value.trim();
        const version = document.getElementById('version').value.trim();
        if (language && version) {
            installPackage(language, version);
            document.getElementById('language').value = '';
            document.getElementById('version').value = '';
        }
    });


    // Fetch runtimes and initialize the IDE
    fetchRuntimes();

    // Initial fetch of packages
    fetchInstalledPackages();
    fetchAvailablePackages();
</script>

</body>
</html>
